server:
  port: 8080

spring:
  config:
    activate:
      on-profile: test
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/postgres
    username: id
    password: pw
  data:
    redis:
      host: localhost
      port: 6379

  mail:
    host: smtp.gmail.com
    port: 587
    username: id  # 보내는 이메일
    password: pw # 앱 비밀번호
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
          ssl:
            enable: false
    service:
      sender:
        host: smtp.gmail.com
        port: 587
        username: id
        password: pw
        ssl:
          enable: false

  # JPA & Hibernate 설정
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        show_sql: true # 실행되는 SQL 쿼리를 로그로 보여줍니다.
        format_sql: true # SQL 쿼리를 보기 좋게 정렬해줍니다.
        default_batch_fetch_size: 100 # N+1 문제 해결을 위한 옵션
    database-platform: org.hibernate.dialect.PostgreSQLDialect

  # JWT 시크릿 키 (기존 설정)
  jwt:
    secret: 'OsvREsESUG7IErmzvcanI1CdfUP22M6mbwR/AZPURQ8='


# 로깅 레벨 설정
logging:
  level:
    # 우리가 만든 애플리케이션 패키지의 로그 레벨을 DEBUG로 설정하여 더 자세한 로그를 봅니다.
    kosa.server: DEBUG
    # Hibernate가 실행하는 SQL을 DEBUG 레벨로 로깅합니다. (show_sql: true 와 유사)
    org.hibernate.SQL: DEBUG
    # SQL에 바인딩되는 파라미터 값을 TRACE 레벨로 로깅합니다. (매우 유용함)
    org.hibernate.orm.jdbc.bind: TRACE
    org.springframework.messaging: DEBUG
    org.springframework.web.socket: DEBUG
    kosa.server.chat.config: DEBUG

#p6spy
decorator:
  datasource:
    p6spy:
      enable-logging: true

p6spy:
  config:
    logMessageFormat: com.p6spy.engine.spy.appender.MultiLineFormat
    appender: com.p6spy.engine.spy.appender.Slf4JLogger
    logLevel: info
    databaseDialectDateFormat: yyyy-MM-dd HH:mm:ss
    dateformat: yyyy-MM-dd HH:mm:ss
    excludecategories: info,debug,result,resultset

springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html